version: '3.7'

services:

  # Database to store XML data
  db-xml:
    container_name: db-xml
    build: docker/images/db/xml
    volumes:
      - xml-data:/var/lib/postgresql/shared-data/
    ports:
      - "${EXP_PG_XML_PORT}:5432"
    environment:
      - POSTGRES_USER=${PG_XML_USER}
      - POSTGRES_PASSWORD=${PG_XML_PASSWORD}
      - POSTGRES_DB=${PG_XML_DATABASE}
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 15

  # Database to store Relational data
  db-rel:
    container_name: db-rel
    build: docker/images/db/rel
    volumes:
      - rel-data:/var/lib/postgresql/shared-data/
    ports:
      - "${EXP_PG_REL_PORT}:5432"
    environment:
      - POSTGRES_DB=${PG_REL_DATABASE}
      - POSTGRES_USER=${PG_REL_USER}
      - POSTGRES_PASSWORD=${PG_REL_PASSWORD}
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 15

  # # Container that automatically converts CSV to XML and then imports the XML to db-xml
  importer:
    container_name: importer
    build: docker/images/python
    volumes:
      - ./src/daemon/importer:/usr/src/app
      - ./docker/volumes/xml:/xml/
      - ./docker/volumes/csv:/csv
    env_file:
      - .env
    depends_on:
      db-xml:
        condition: service_healthy
  
  # # Container that runs a elixir exmaple
  watcher:
    container_name: watcher
    build: docker/images/elixir
    volumes:
      - ./src/daemon/watcher:/usr/src/app
      - ./docker/volumes/xml:/xml
    env_file:
      - .env
    depends_on:
      - importer
      - db-xml

  # # Container that automatically migrates data from db-xml to db-rel
  migrator:
    container_name: migrator
    build: docker/images/golang
    volumes:
      - ./src/daemon/migrator:/usr/src/app
      - ./docker/volumes/xml:/xml
    env_file:
      - .env
    depends_on:
      - watcher

  # # Container that automatically migrates data from db-xml to db-rel
  gis-updater:
    container_name: gis-updater
    build: docker/images/python
    volumes:
      - ./src/daemon/gis-updater:/usr/src/app
      - ./docker/volumes/xml:/xml
    env_file:
      - .env
    depends_on:
      broker:
        condition: service_healthy

  # # Container that runs the RPC server
  rpc-server:
    container_name: rpc-server
    build: docker/images/python
    volumes:
      - ./src/server/rpc:/usr/src/app
      - ./docker/volumes/xml:/xml
    ports:
      - "${RPC_SERVER_PORT}:${RPC_SERVER_PORT}"
    env_file:
      - .env
    depends_on:
      db-xml:
        condition: service_healthy

  # # Container that runs the API for entities
  api-entities:
    container_name: api-entities
    build: docker/images/javascript
    volumes:
      - ./src/api/entities:/usr/src/app
      - ./docker/volumes/xml:/xml
    ports:
      - "${EXT_API_ENTITIES_PORT}:${API_PORT}"
    env_file:
      - .env
    depends_on:
      db-rel:
        condition: service_healthy

  # # Container that runs the API for gis
  api-gis:
    container_name: api-gis
    build: docker/images/python
    volumes:
      - ./src/api/gis:/usr/src/app
      - ./docker/volumes/xml:/xml
    ports:
      - "${EXT_API_GIS_PORT}:${API_PORT}"
    env_file:
      - .env
    depends_on:
      db-rel:
        condition: service_healthy
    
    # # Container that runs the API for procedures
  api-proc:
    container_name: api-proc
    build: docker/images/python
    volumes:
      - ./src/api/proc:/usr/src/app
      - ./docker/volumes/xml:/xml
    ports:
      - "${EXT_API_PROC_PORT}:${API_PORT}"
    env_file:
      - .env

  # Container that runs the API for graphql
  api-graphql:
    container_name: api-graphql
    build: docker/images/python
    volumes:
      - ./src/api/graphql:/usr/src/app
      - ./docker/volumes/xml:/xml
    ports:
      - "7322:${API_PORT}"
    env_file:
      - .env

  redis-borker:
    container_name: redis
    image: redis/redis-stack:latest
    ports:
      - "${REDIS_PORT}:6379"
      - "${REDIS_UI_PORT}:8001"

  broker:
    container_name: rabbitmq
    image: "rabbitmq:3.12.9-management-alpine"
    environment:
      RABBITMQ_DEFAULT_USER: "$RABBIT_MQ_USERNAME"
      RABBITMQ_DEFAULT_PASS: "$RABBIT_MQ_PASSWORD"
      RABBITMQ_DEFAULT_VHOST: "$RABBIT_MQ_VIRTUAL_HOST"
    ports:
      - "${RABBIT_MQ_PORT}:5672" # AMQP protocol port
      - "${RABBIT_MQ_UI_PORT}:15672" # management interface port
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping", "-q" ]
      interval: 10s
      timeout: 10s
      retries: 15

volumes:
  xml-data:
  rel-data:
